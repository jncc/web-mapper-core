pipeline {
    agent { label ' nodejs ' }
    stages {
        stage('Checkout Master Branch') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', 
                                    relativeTargetDir: 'master']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/jncc/web-mapper-core.git']]])
            }
        }
        stage('Build Web Mapper') {
            steps {
                dir('./master/web-map') {
                    nvm(version: '13.5.0') {
                        sh 'npm install'
                        sh 'ng build --prod --extract-css=false'
                    }
                }
            }
        }
        stage('Build Dotnet API') {
            steps {
                dir('./master/web-api') {
                    sh 'dotnet clean && dotnet publish -c Release -o .publish'
                }
            }
        }        
        stage('Apply config to files for deployment') {
            steps {
                sh 'sed -i \'s|SERVICE_WORKING_DIRECTORY|\'$SERVICE_WORKING_DIRECTORY\'|g\' ./master/deployment/jncc-web-api.service'
                sh 'sed -i \'s|SERVICE_EXEC_START|\'$SERVICE_EXEC_START\'|g\' ./master/deployment/jncc-web-api.service'
                sh 'sed -i \'s|SERVICE_USER|\'$SERVICE_USER\'|g\' ./master/deployment/jncc-web-api.service'
                sh 'sed -i \'s|SERVICE_GROUP|\'$SERVICE_GROUP\'|g\' ./master/deployment/jncc-web-api.service'

                sh 'sed -i \'s|WEBAPI_LOG_LEVEL|\'$WEBAPI_LOG_LEVEL\'|g\' ./master/deployment/web-api-appsettings.template.json'
                sh 'sed -i \'s|WEBAPI_DATABASE_HOST|\'$WEBAPI_DATABASE_HOST\'|g\' ./master/deployment/web-api-appsettings.template.json'
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'emodnet_web_api_database', usernameVariable: 'WEBAPI_DATABASE_USER', passwordVariable: 'WEBAPI_DATABASE_PASSWORD']]) {
                    sh 'sed -i \'s|WEBAPI_DATABASE_USER|\'$WEBAPI_DATABASE_USER\'|g\' ./master/deployment/web-api-appsettings.template.json'
                    sh 'sed -i \'s|WEBAPI_DATABASE_PASSWORD|\'$WEBAPI_DATABASE_PASSWORD\'|g\' ./master/deployment/web-api-appsettings.template.json'
                }
                sh 'sed -i \'s|WEBAPI_DATABASE|\'$WEBAPI_DATABASE\'|g\' ./master/deployment/web-api-appsettings.template.json'
                sh 'sed -i \'s|WEBAPI_TEST_DATA_WMS_URL|\'$WEBAPI_TEST_DATA_WMS_URL\'|g\' ./master/deployment/web-api-appsettings.template.json'
                sh 'sed -i \'s|WEBAPI_MAX_GAZETTEER_RESULTS|\'$WEBAPI_MAX_GAZETTEER_RESULTS\'|g\' ./master/deployment/web-api-appsettings.template.json'
                sh 'cp ./master/deployment/web-api-appsettings.template.json ./master/web-api/.publish/appsettings.json'

                sh 'sed -i \'s|WEBMAP_NAME|' + env.WEBMAP_NAME.replace(' ', '\\ ') + '|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_LOGGING_ENABLED|\'$WEBMAP_LOGGING_ENABLED\'|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_API_URL|\'$WEBMAP_API_URL\'|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_INSTANCE|\'$WEBMAP_INSTANCE\'|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_BINGMAPS_API_KEY|\'$WEBMAP_BINGMAPS_API_KEY\'|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_DEFAULT_BASELAYER|\'$WEBMAP_DEFAULT_BASELAYER\'|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'sed -i \'s|WEBMAP_GAZETTEER_PLACEHOLDER|' + env.WEBMAP_GAZETTEER_PLACEHOLDER.replace(' ', '\\ ') + '|g\' ./master/deployment/web-map-config.prod.template.json'
                sh 'rm ./master/web-map/dist/web-map/assets/config/*.json'
                sh 'cp ./master/deployment/web-map-config.prod.template.json ./master/web-map/dist/web-map/assets/config/config.prod.json'

                // sh 'sed -i \'s|WEBAPI_URL|${WEBAPI_URL}|g\' ./master/deployment/apache/httpd-live.conf'
                // sh 'sed -i \'s|WEBAPI_SERVER_ADMIN_EMAIL|${WEBAPI_SERVER_ADMIN_EMAIL}|g\' ./master/deployment/apache/httpd-live.conf'
                // sh 'sed -i \'s|WEBMAP_URL|${WEBMAP_URL}|g\' ./master/deployment/httpd-live.conf'
                // sh 'sed -i \'s|WEBMAP_SERVER_ADMIN_EMAIL|${WEBMAP_SERVER_ADMIN_EMAIL}|g\' ./master/deployment/httpd-live.conf'

                // sh 'sed -i \'s|WEBMAP_URL|${WEBMAP_URL}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBMAP_SERVER_ADMIN_EMAIL|${WEBMAP_SERVER_ADMIN_EMAIL}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBMAP_LIVE_FOLDER|${WEBMAP_LIVE_FOLDER}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBAPI_URL|${WEBAPI_URL}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBAPI_SERVER_ADMIN_EMAIL|${WEBAPI_SERVER_ADMIN_EMAIL}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBAPI_PROXY_PASS_URL|${WEBAPI_PROXY_PASS_URL}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBAPI_IP_RESTRICT|${WEBAPI_IP_RESTRICT}|g\' ./master/deployment/httpd-ssl-live.conf'
                // sh 'sed -i \'s|WEBAPI_IP_RESTRICT_ALT|${WEBAPI_IP_RESTRICT_ALT}|g\' ./master/deployment/httpd-ssl-live.conf'
            }
        }
        stage('Create deployment pacakges') {
            steps {
                dir('./master/web-api/.publish') {
                    sh 'tar -zcf ../../dotnet-published-package.tgz .'
                }
                dir('./master/web-map/dist/web-map') {
                    sh 'tar -zcf ../../../web-published-package.tgz .'
                }
                // dir('./master/deployment') {
                //     sh 'tar -zcf ../deployment-package.tgz .'
                // }
            }
        }        
        stage('Create temp SSH key using ec2-instance-connect') {
            steps {
                sh 'rm -f ${WORKSPACE}/temp_key'
                sh 'ssh-keygen -t rsa -f ${WORKSPACE}/temp_key -q -N ""'
                sh 'aws ec2-instance-connect send-ssh-public-key --region ${AWS_REGION} --instance-id ${AWS_INSTANCE_ID} --availability-zone ${AWS_AVAILABILITY_ZONE} --instance-os-user ${AWS_INSTANCE_OS_USER} --ssh-public-key file://${WORKSPACE}/temp_key.pub'
            }
        }        
        stage('Upload Mapper and API to instance (working directory)') {
            steps {
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "mkdir -p ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/dotnet-published"'
                sh 'scp -i ${WORKSPACE}/temp_key ${WORKSPACE}/master/dotnet-published-package.tgz ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP}:${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}'
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "tar -zxf ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/dotnet-published-package.tgz -C ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/dotnet-published"'
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "mkdir -p ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/web-published"'
                sh 'scp -i ${WORKSPACE}/temp_key ${WORKSPACE}/master/web-published-package.tgz ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP}:${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}'
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "tar -zxf ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/web-published-package.tgz -C ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/web-published"'
                // sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "mkdir -p ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/deployment"'
                // sh 'scp -i ${WORKSPACE}/temp_key ${WORKSPACE}/master/deployment-package.tgz ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP}:${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}'
                // sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "tar -zxf ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/deployment-package.tgz -C ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/deployment"'
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo chown ${SERVICE_USER}:${SERVICE_GROUP} -R ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}"'
            }
        }
        // stage('Ensure Apache2 is installed and running with lets encrypt certs') {
        //     steps {
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "export WEBAPI_SERVER_ADMIN_URL=${WEBAPI_SERVER_ADMIN_URL}; export WEBAPI_URL=${WEBAPI_URL}; export sudo bash ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/deployment/apache/apache-setup.sh"'
        //     }
        // }
        // stage('Deploy/update dotnet systemd file') {
        //     steps {
        //         catchError {
        //             sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo systemctl stop jncc-web-api"'
        //         }
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo cp ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/deployment/jncc-web-api.service /etc/systemd/system/jncc-web-api.service"'
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo systemctl daemon-reload"'
        //     }            
        // }
        // stage('Remove existing symlink and point to newly deployed directory') {
        //     steps {
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo rm /home/esdm/web-published/jncc-web-map"'
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo rm /home/esdm/dotnet-published/jncc-web-api"'
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo ln -s ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/web-published /home/esdm/web-published/jncc-web-map"'
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo ln -s ${AWS_INSTANCE_DEPLOY_DIR}/${BUILD_NUMBER}/dotnet-published /home/esdm/dotnet-published/jncc-web-api"'
        //     }
        // }
        // stage('Start newly deployed dotnet service and reload apache') {
        //     steps {
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo systemctl restart jncc-web-api"'
        //         sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "sudo systemctl restart apache2"'
        //     }         
        // }
        stage('Cleanup old deployments (keeps 10 deployments)') {
            steps {
                sh 'ssh -i ${WORKSPACE}/temp_key ${AWS_INSTANCE_OS_USER}@${AWS_INSTANCE_INTERNAL_IP} "cd ${AWS_INSTANCE_DEPLOY_DIR} && ls -tp | tail -n +11 | xargs -I {} sudo rm -rf -- {}"'
            }
        }        
    }
}